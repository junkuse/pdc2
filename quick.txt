#include <stdio.h>
#include <omp.h>

void swap(int* a, int* b)
{
        int t = *a;
        *a = *b;
        *b = t;
}

int partition(int arr[], int start, int end )
{

        int pivot = arr[end];
        int i = (start - 1);

        for (int j = start; j <= end - 1; j++) {

                if (arr[j] < pivot) {
                        i++;
                        swap(&arr[i], &arr[j]);
                }
        }
        swap(&arr[i + 1], &arr[end]);
        return (i + 1);
}


void quicksort(int arr[], int start, int end)
{

        int index;

        if (start < end) {


                index = partition(arr, start, end);

                #pragma omp parallel sections
                {
                        #pragma omp section
                        {
                                quicksort(arr, start, index - 1);
                        }
                        #pragma omp section
                        {
                                quicksort(arr, index + 1, end);
                        }
                }
        }
}

int main()
{
        int SIZE =1<<8;
        int A[SIZE];
        for(int i=0;i<SIZE;i++)
        {
                A[i]=rand()%SIZE;
        }
        //int A[5] = {6,9,1,3,7};
        int N = SIZE;
        //int N=5;

        int i=0, j=0;
        int first;
        double start,end;

        start=omp_get_wtime();
        quicksort(A, 0, N-1);
        end=omp_get_wtime();

        for(i=0;i<N;i++)
        {
                printf(" %d",A[i]);
        }

        printf("\n-------------------------\n Time Parallel= %f",(end-start));
}