#include <stdio.h>
#include <omp.h>

void mergesort(int a[],int i,int j);
void merge(int a[],int i1,int j1,int i2,int j2);

int main()
{
        int SIZE =1<<8;
        int A[SIZE];
        for(int i=0;i<SIZE;i++)
        {
            A[i]=rand()%SIZE;
        }
        //int A[5] = {6,9,1,3,7};
        int N = SIZE;
        //int N=5;
        double start,end;

        start=omp_get_wtime();
        mergesort(A, 0,N-1);
        end=omp_get_wtime();

        printf("\nSorted array :\n");
        for(int i=0;i<N;i++)
                printf("%d ",A[i]);
        printf("%f \n",end-start);

        return 0;
}

void mergesort(int a[],int i,int j)
{
    int mid;
    if(i<j)
    {
        mid=(i+j)/2;
        #pragma omp parallel sections
        {

            #pragma omp section
            {
                mergesort(a,i,mid);
            }

            #pragma omp section
            {
                mergesort(a,mid+1,j);
            }
        }

        merge(a,i,mid,mid+1,j);
    }
}

void merge(int a[],int i1,int j1,int i2,int j2)
{
    int temp[1000];
    int i,j,k;
    i=i1;
    j=i2;
    k=0;
    while(i<=j1 && j<=j2)
    {
        if(a[i]<a[j])
            temp[k++]=a[i++];
        else
            temp[k++]=a[j++];
    }
    while(i<=j1)
        temp[k++]=a[i++];

    while(j<=j2)
        temp[k++]=a[j++];

    for(i=i1,j=0;i<=j2;i++,j++)
        a[i]=temp[j];
}